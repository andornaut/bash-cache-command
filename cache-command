#!/bin/bash

set -o errexit -o pipefail -o nounset

function usage() {
    echo -n "Usage: $(basename "${0}") "
    echo '[-b PATH] [-e SECONDS] [-h] [-p] [-r] [-v] -- COMMAND'
}

baseDir="${XDG_RUNTIME_DIR-/tmp/cache-command}"
expirationInSeconds=
purge=false
remove=false
verbose=false

# Arg parsing from: https://stackoverflow.com/a/29754866
while getopts 'b:e:hprv' c; do 
    case $c in
        b)
            baseDir="$OPTARG"
            ;;
        e)
            expirationInSeconds="$OPTARG"
            ;;
        h)
            usage
            exit
            ;;
        p)
            purge=true
            ;;
        r)
            remove=true
            ;;
        v)
            verbose=true
            ;;
        *)
            usage >/dev/stderr
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
command="$@"

# Remove ${baseDir} before validating the COMMAND argument, because the latter is moot in this case
if [[ "${remove}" = true ]]; then
    [[ "${verbose}" = false ]] || echo "Removing base directory: ${baseDir}"
    rm -rf $([[ "${verbose}" = false ]] || echo -n '--verbose') "${baseDir}"
    exit
fi

if [[ $# -eq 0 ]]; then
    usage >/dev/stderr
    exit 1
fi

# Strip everything after the first word, because sha256sum adds: " -"
key="$(echo -n "${command}"|sha256sum)"
key=${key%% *}
cacheDir="${baseDir}/${key}"

if [[ "${verbose}" = true ]]; then
    echo "Base directory: ${baseDir}"
    echo "Cache directory: ${cacheDir}"
    echo "Command: ${command}"
    echo "Expiration in seconds: ${expirationInSeconds}"
    echo "Purge: ${purge}"
    echo "Remove: ${remove}"
    echo "Verbose: ${verbose}"
fi

function removeCacheDir() {
    [[ "${verbose}" = false ]] || echo "Purging cache ${cacheDir}"
    rm -fr $([[ "${verbose}" = false ]] || echo -n '-v') "${cacheDir}"
}

if [[ "${purge}" = true ]]; then
    removeCacheDir
    exit
fi

exitCodePath="${cacheDir}/exit-code"
errPath="${cacheDir}/stderr"
outPath="${cacheDir}/stdout"

function cacheAge() {
    # GNU `stat -c` vs BSD `stat -f`
    modifiedTimeMacWorkaround=$(stat -c %Y "${exitCodePath}" 2>/dev/null || stat -f%c "${exitCodePath}")
    echo -n $(($(date +%s)-${modifiedTimeMacWorkaround}))
}

if [[ -f "${exitCodePath}" ]]; then
    if [[ -z ${expirationInSeconds} || $(cacheAge) -lt ${expirationInSeconds} ]]; then
        [[ "${verbose}" = false ]] || echo "Using cache (cache age in seconds: $(cacheAge))"
        cat "${outPath}"
        cat "${errPath}" 1>&2
        exit $(cat "${exitCodePath}")
    fi

    [[ "${verbose}" = false ]] || echo "Cache has expired (cache age in seconds: $(cacheAge))"
    removeCacheDir
fi

mkdir -p "${cacheDir}"

# Avoid race-condition by chmod'ing first
touch ${exitCodePath} ${errPath} ${outPath}
chmod 600 ${exitCodePath} ${errPath} ${outPath}

# Executing the ${command} must be allowed to exit with a non-zero exit code
set +o errexit
${command} 2> >(tee "${errPath}" 1>&2) > >(tee "${outPath}")
exitCode=$?
echo -n ${exitCode} > "${exitCodePath}"
exit ${exitCode}
